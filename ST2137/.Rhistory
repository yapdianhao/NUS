rep(4, 2)
rep(4, 5)
c <- rep(4, 5)
c
d <- rep(c, 3)
d
e <- numeric(9)
e
seq(0,10, 1)
seq(0, 10, 2)
seq(0, 10, 3)
seq(0, 10, length = 10)
seq(0, 10, length = 9)
seq(0, 10, length = 11)
v = c(`:6)`)
v = c(1:6)
v
dim(v) = c(2, 3)
v
dim(v) = c(3, 2)
v
dim(v) = c(1, 6)
v
dim(v) = NULL
v
a = c(1:4)
b = c(5:8)
m = rbind(a, b)
m
m = cbind(a, b)
m
m = cbind(b, a)
m
m = rbind(b, a)
m
b = m(5: 7)
b = c(5: 7)
m = rbind(a, b)
b = c(5:8)
m = rbind(a, b)
m
height = c(150, 190)
weight = c(56, 75)
df = data.frame(height, weight)
df
df.names
df.name
names(df)
names(df) = c('c1', 'c2')
df
S = 0
for (i in 1:10) { S = S + i}
S
x <- rnorm(10)
x
x[1] = x[1] * 100
x
Winsorize(x)
x
Winsorize(x)
getwd()
?rexp
?aov
?anova
getwd()
setwd("/Users/ftt.dianhao.yap/desktop/st2137")
getwd()
OR<-function(x, pad.zeros = FALSE, conf.level=0.95){
if(pad.zeros){if(any(x==0)) {x<-x+0.5}}
theta<-x[1,1]*x[2,2]/(x[2,1]*x[1,2])
ASE<-sqrt(sum(1/x))
CI<-exp(log(theta) +c(-1,1)*qnorm(0.5*(1+conf.level))*ASE)
list(estimator=theta, ASE=ASE,conf.interval=CI,
conf.level=conf.level) }
OR(chest.pain)
OR<-function(x, pad.zeros = FALSE, conf.level=0.95){
if(pad.zeros){if(any(x==0)) {x<-x+0.5}}
theta<-x[1,1]*x[2,2]/(x[2,1]*x[1,2])
ASE<-sqrt(sum(1/x))
CI<-exp(log(theta) +c(-1,1)*qnorm(0.5*(1+conf.level))*ASE)
list(estimator=theta, ASE=ASE,conf.interval=CI,
conf.level=conf.level) }
OR(matrix(c(173, 125, 150, 73), ncol = 2, byrow = 2))
OR(matrix(c(173, 125, 150, 73), ncol = 2, byrow = 2), conf.level = 0.9)
q1 = matrix(c(173, 125, 150, 73), ncol = 2, byrow = 2)
chisq.test(q1)
set.seed(666)
rexp(50, 1 / 430)
?r.exp
?rexp
?qt
?qexp
?qt
?qexp
qexp(0.95_)
qexp(0.95)
simulate = function(lambda, N = 1000, n = 50) {
sds = c(rep(0, N))
avgs = c(rep(0, N))
tcrit = qexp(0.95)
for (i in 1:N) {
sample = rexp(n, 1 / lambda)
sds[i] = sd(sample)
avgs[i] = mean(sample)
}
return(sum(abs(avgs - 400) > tcrit) / N)
}
simulate(430)
simulate(500)
simulate(550)
simulate(700)
simulate(430)
simulate(500)
simulate(550)
simulate(550)
simulate(430) #0.961
simulate(500) #0.987
simulate(550) # 0.998
simulate(700) # 1
# Q4
us.pop = read.csv('./sample_US_pop.csv', header = T)
us.pop
attach(us.pop)
N = 1000
n = length(u) # sample size
theta.bootstrap = numeric(N)
theta.bootstrap = numeric(N) # to be filled
for (i in 1:N) {
sp = sample(1 : n, size = n, replace = T)
print(sp)
}
theta.bootstrap[i] = mean(sampled.v) / mean(sampled.u)
theta.bootstrap = numeric(N) # to be filled
for (i in 1:N) {
sp = sample(1 : n, size = n, replace = T)
sampled.u = u[sp]
sampled.v = v[sp]
theta.bootstrap[i] = mean(sampled.v) / mean(sampled.u)
}
sd(theta.bootstrap)
us.pop
sd(theta.bootstrap)
theta.hat = mean(v)  / mean(u)
theta.hat
se = sd(theta.bootstrap)
se
bias = mean(theta.bootstrap) - theta.hat
low = theta.hat - bias - 1.96 * se
high = theta.hat - bias + 1.96 * se
cat("95% confidence interval is [", low, ", ", high, "]\n")
cat("95% confidence interval is [", low, ",", high, "]\n")
