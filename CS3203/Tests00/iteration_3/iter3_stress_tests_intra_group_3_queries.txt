1 - optimisation: sort within group by number of rows in result table (random order)
assign a; variable v; stmt s1; procedure p1, p2; if ifs; 
Select <a, v> pattern a(v, _) such that Affects*(222, s1) such that Calls*(p1, p2) and Parent*(209, s1) such that Modifies(ifs, v) and Uses(p1, _) and Uses(s1, v) and Modifies(p2, v) pattern ifs("x", _, _)
100 a,220 a,243 a,27 a,302 a,327 a,332 a,338 a,377 a,389 a,77 a,92 a
5000
2 - optimisation: sort within group by number of rows in result table (inverse order)
assign a; variable v; stmt s1; procedure p1, p2; if ifs; 
Select <a, v> such that Uses(s1, v) and Modifies(ifs, v) such that Modifies(p2, v) pattern a(v, _) such that Parent*(209, s1) such that Calls*(p1, p2) such that Affects*(222, s1) and Uses(p1, _) pattern ifs("x", _, _)
100 a,220 a,243 a,27 a,302 a,327 a,332 a,338 a,377 a,389 a,77 a,92 a
5000
3 - optimisation: sort within group by number of rows in result table (random order)
assign a; variable v; procedure p; if ifs; while w1, w2; 
Select <p, w1, w2> pattern a(v, _) such that Uses(p, v) such that Modifies(ifs, v) pattern w1(v, _) pattern ifs("a", _, _) such that Parent*(w1, w2) such that Next*(246, w2)
AST 218 224,AST 218 228,AST 218 236,AST 218 248,Aragon 213 218,Aragon 213 224,Aragon 213 228,Aragon 213 236,Aragon 213 248,Aragon 213 260,Aragon 213 274,Bumblebee 213 218,Bumblebee 213 224,Bumblebee 213 228,Bumblebee 213 236,Bumblebee 213 248,Bumblebee 213 260,Bumblebee 213 274,COLOUR 213 218,COLOUR 213 224,COLOUR 213 228,COLOUR 213 236,COLOUR 213 248,COLOUR 213 260,COLOUR 213 274,COLOUR 218 224,COLOUR 218 228,COLOUR 218 236,COLOUR 218 248,Frodo 213 218,Frodo 213 224,Frodo 213 228,Frodo 213 236,Frodo 213 248,Frodo 213 260,Frodo 213 274,Gandalf 213 218,Gandalf 213 224,Gandalf 213 228,Gandalf 213 236,Gandalf 213 248,Gandalf 213 260,Gandalf 213 274,PQL 218 224,PQL 218 228,PQL 218 236,PQL 218 248,SIMPLE 213 218,SIMPLE 213 224,SIMPLE 213 228,SIMPLE 213 236,SIMPLE 213 248,SIMPLE 213 260,SIMPLE 213 274,SIMPLE 218 224,SIMPLE 218 228,SIMPLE 218 236,SIMPLE 218 248,computation 213 218,computation 213 224,computation 213 228,computation 213 236,computation 213 248,computation 213 260,computation 213 274,fruits 213 218,fruits 213 224,fruits 213 228,fruits 213 236,fruits 213 248,fruits 213 260,fruits 213 274,fruits 218 224,fruits 218 228,fruits 218 236,fruits 218 248,korea 213 218,korea 213 224,korea 213 228,korea 213 236,korea 213 248,korea 213 260,korea 213 274,korea 218 224,korea 218 228,korea 218 236,korea 218 248,main 213 218,main 213 224,main 213 228,main 213 236,main 213 248,main 213 260,main 213 274,multipleContainers 213 218,multipleContainers 213 224,multipleContainers 213 228,multipleContainers 213 236,multipleContainers 213 248,multipleContainers 213 260,multipleContainers 213 274,multipleContainers 218 224,multipleContainers 218 228,multipleContainers 218 236,multipleContainers 218 248,stars 213 218,stars 213 224,stars 213 228,stars 213 236,stars 213 248,stars 213 260,stars 213 274,stars 218 224,stars 218 228,stars 218 236,stars 218 248
5000
4 - optimisation: sort within group by number of rows in result table (inverse order)
assign a; variable v; procedure p; if ifs; while w1, w2; 
Select <p, w1, w2> such that Modifies(ifs, v) such that Uses(p, v) pattern a(v, _) pattern w1(v, _) such that Parent*(w1, w2) such that Next*(246, w2) pattern ifs("a", _, _) 
AST 218 224,AST 218 228,AST 218 236,AST 218 248,Aragon 213 218,Aragon 213 224,Aragon 213 228,Aragon 213 236,Aragon 213 248,Aragon 213 260,Aragon 213 274,Bumblebee 213 218,Bumblebee 213 224,Bumblebee 213 228,Bumblebee 213 236,Bumblebee 213 248,Bumblebee 213 260,Bumblebee 213 274,COLOUR 213 218,COLOUR 213 224,COLOUR 213 228,COLOUR 213 236,COLOUR 213 248,COLOUR 213 260,COLOUR 213 274,COLOUR 218 224,COLOUR 218 228,COLOUR 218 236,COLOUR 218 248,Frodo 213 218,Frodo 213 224,Frodo 213 228,Frodo 213 236,Frodo 213 248,Frodo 213 260,Frodo 213 274,Gandalf 213 218,Gandalf 213 224,Gandalf 213 228,Gandalf 213 236,Gandalf 213 248,Gandalf 213 260,Gandalf 213 274,PQL 218 224,PQL 218 228,PQL 218 236,PQL 218 248,SIMPLE 213 218,SIMPLE 213 224,SIMPLE 213 228,SIMPLE 213 236,SIMPLE 213 248,SIMPLE 213 260,SIMPLE 213 274,SIMPLE 218 224,SIMPLE 218 228,SIMPLE 218 236,SIMPLE 218 248,computation 213 218,computation 213 224,computation 213 228,computation 213 236,computation 213 248,computation 213 260,computation 213 274,fruits 213 218,fruits 213 224,fruits 213 228,fruits 213 236,fruits 213 248,fruits 213 260,fruits 213 274,fruits 218 224,fruits 218 228,fruits 218 236,fruits 218 248,korea 213 218,korea 213 224,korea 213 228,korea 213 236,korea 213 248,korea 213 260,korea 213 274,korea 218 224,korea 218 228,korea 218 236,korea 218 248,main 213 218,main 213 224,main 213 228,main 213 236,main 213 248,main 213 260,main 213 274,multipleContainers 213 218,multipleContainers 213 224,multipleContainers 213 228,multipleContainers 213 236,multipleContainers 213 248,multipleContainers 213 260,multipleContainers 213 274,multipleContainers 218 224,multipleContainers 218 228,multipleContainers 218 236,multipleContainers 218 248,stars 213 218,stars 213 224,stars 213 228,stars 213 236,stars 213 248,stars 213 260,stars 213 274,stars 218 224,stars 218 228,stars 218 236,stars 218 248
5000